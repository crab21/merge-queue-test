name: Merge Queue
on:
  workflow_dispatch:

env:
  TRIGGER_BRANCH_NAME: master
  DL_PR_PATH: .github/workflows/scripts/pr.nu
  SLACK_TOKEN: ${{ secrets.SLACK_API_TOKEN_IT_INTEGRATION_PARALLEL }}

jobs:
  update-branch:
    concurrency:
      group: merge-queue
      cancel-in-progress: false
    runs-on: general-nano-x86-v2
    if: github.actor == 'lfbot'
    steps:
      - uses: hustcer/setup-nu@main
        with:
          version: "0.105.1"
      - name: DL `pr/pr.yaml`
        shell: nu {0}
        id: dl-pr-info
        env:
          GH_TOKEN: ${{ secrets.GH_BOT_TOKEN }}
        run: |
          use std log
          def DLRemoteFile [filePath,branchName="master",needTmp=false] {
            log debug $"get content from remote ...........($filePath | path basename)"
            let resp = (gh api --paginate -H 'Pragma: no-cache' -H "Accept: application/vnd.github+json" -H "X-GitHub-Api-Version: 2022-11-28" $"/repos/($env.REPOSITORY)/contents/($filePath)?ref=($branchName)")
            mut fileNameTmp = $filePath | path basename
            if $needTmp {
              $fileNameTmp = echo "/tmp" | path join (random uuid)
            }

            (echo $resp | from json | get content | base64 -d | save -f $fileNameTmp)
            return {
              tmpPath: $fileNameTmp,
              sha: ($resp | from json | get sha | default ""),
            }
          }

          export def DLRemoteFileExport [needTmp=false] {
            let fileNameTmp = echo "/tmp" | path join (random uuid)
            let dlInfo = DLRemoteFile $env.DL_PATH ($env.BRANCH_NAME | default ${{env.TRIGGER_BRANCH_NAME}}) $needTmp
            $dlInfo | to json | save -f $fileNameTmp
            return $fileNameTmp
          }
          export-env {
            $env.REPOSITORY = echo ${{ github.repository }}
            $env.BRANCH_NAME = echo ${{env.TRIGGER_BRANCH_NAME}}
            $env.DL_PATH = echo ${{env.DL_PR_PATH}}
          }
          DLRemoteFileExport false

          export-env {
            $env.BRANCH_NAME = "gh-pr"
            $env.DL_PATH = "pr/pr.yaml"
            $env.REPOSITORY = ^echo ${{ github.repository }}
          }
          ^ls -allh
          let prResultPath = DLRemoteFileExport true
          log info ($prResultPath | to json -r)
          ^cat $prResultPath
          let prPath = open $prResultPath | from json | get -i tmpPath
          let prInfo = open $prPath | from yaml | default []
          if (($prInfo | length) == 0) {
            log error "No PRs in queue."
            exit 1
          }

          let prNumber = $prInfo | sort-by queueTime | first | get -i number
          log info ($prInfo | to json -r)
          ^pwd
          echo $"prNumber=($prNumber)" |  save --append $env.GITHUB_OUTPUT
      - name: add `merge queue` link to PR comment
        if: steps.dl-pr-info.outputs.prNumber != ''
        uses: peter-evans/create-or-update-comment@v4
        with:
          issue-number: ${{ steps.dl-pr-info.outputs.prNumber }}
          body: |
            ✅ [Merge Queue](https://github.com/${{github.repository}}/actions/runs/${{github.run_id}})
      - name: drop pr from queue
        if: steps.dl-pr-info.outputs.prNumber != ''
        shell: nu {0}
        env:
          GH_TOKEN: ${{ secrets.GH_BOT_TOKEN }}
        run: |
          use std log

          let prNumber = echo ${{ steps.dl-pr-info.outputs.prNumber }}
          $"process PR: #($prNumber)\n" | save -f $env.GITHUB_STEP_SUMMARY
          log info $"drop pr #($prNumber) from queue"
          let runsLink = "https://github.com/${{github.repository}}/actions/runs/${{github.run_id}}"
          let body = {"number": $prNumber,"ghType":2, "runs_link": $runsLink} | to json -r
          export-env {
            $env.REPOSITORY = echo ${{ github.repository }}
            $env.BRANCH_NAME = "gh-pr"
            $env.DL_PATH = "pr/pr.yaml"
            $env.MAX_RETRY = 20
          }
          nu pr.nu modifyQueue $body

      - name: get head ref
        if: steps.dl-pr-info.outputs.prNumber != ''
        shell: nu {0}
        id: get-head-ref
        env:
          GH_TOKEN: ${{ secrets.GH_BOT_TOKEN }}
        run: |
          use std log
          ^pwd
          ^ls -allh

          let prNumber = echo ${{ steps.dl-pr-info.outputs.prNumber }}
          let pullRequest = gh api --paginate -H "Accept: application/vnd.github+json" -H "X-GitHub-Api-Version: 2022-11-28"   $"/repos/${{ github.repository }}/pulls/($prNumber)" | from json

          let currentRef = $pullRequest | get -i head | get -i ref | default "" | into string
          log info $"currentRef: ($currentRef)"
          if ($currentRef | is-empty) {
            log error "No head ref found for PR #($prNumber)."
            exit 1
          }
          echo $"currentRef=($currentRef)" |  save --append $env.GITHUB_OUTPUT

      - name: check pr ${{ steps.dl-pr-info.outputs.prNumber }} is `open`
        shell: nu {0}
        env:
          GH_TOKEN: ${{ secrets.GH_BOT_TOKEN }}
        run: |
          use std log
          ^pwd
          ^ls -allh

          let prNumber = echo ${{ steps.dl-pr-info.outputs.prNumber }}
          let pullRequest = gh api --paginate -H "Accept: application/vnd.github+json" -H "X-GitHub-Api-Version: 2022-11-28"   $"/repos/${{ github.repository }}/pulls/($prNumber)" | from json


          log info "check pr is open ........."
          if ($pullRequest | get state | str upcase ) != "OPEN" {
            log error "PR is not open, please check the PR status."
            do { nu pr.nu GetMsgAndNotification "in_progress" 2 $prNumber ({message: "pr is not open."} | to json -r) } | ignore
            echo  "checkPass=false" |  save --append $env.GITHUB_OUTPUT
            exit 1
          }
          do { nu pr.nu GetMsgAndNotification "in_progress" } | ignore
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ref: ${{ steps.get-head-ref.outputs.currentRef}}

      - name: dl codeowners
        if: steps.dl-pr-info.outputs.prNumber != ''
        shell: nu {0}
        env:
          GH_TOKEN: ${{ secrets.GH_BOT_TOKEN }}
        run: |
          use std log
          ^pwd
          ^ls -allh
          rm -rf .github/CODEOWNERS
          rm -rf ${{env.DL_PR_PATH}}
          use std log
          def DLRemoteFile [filePath,branchName="master",needTmp=false] {
            log debug $"get content from remote ...........($filePath | path basename)"
            let resp = (gh api --paginate -H 'Pragma: no-cache' -H "Accept: application/vnd.github+json" -H "X-GitHub-Api-Version: 2022-11-28" $"/repos/($env.REPOSITORY)/contents/($filePath)?ref=($branchName)")
            mut fileNameTmp = $filePath | path basename
            if $needTmp {
              $fileNameTmp = echo "/tmp" | path join (random uuid)
            }

            (echo $resp | from json | get content | base64 -d | save -f $fileNameTmp)
            return {
              tmpPath: $fileNameTmp,
              sha: ($resp | from json | get sha | default ""),
            }
          }

          export def DLRemoteFileExport [needTmp=false] {
            let fileNameTmp = echo "/tmp" | path join (random uuid)
            let dlInfo = DLRemoteFile $env.DL_PATH ($env.BRANCH_NAME | default ${{env.TRIGGER_BRANCH_NAME}}) $needTmp
            $dlInfo | to json | save -f $fileNameTmp
            return $fileNameTmp
          }

          export-env {
            $env.REPOSITORY = echo ${{ github.repository }}
            $env.BRANCH_NAME = echo ${{env.TRIGGER_BRANCH_NAME}}
            $env.DL_PATH = echo ${{env.DL_PR_PATH}}
          }
          DLRemoteFileExport false
          ^ls -allh
          export-env {
            $env.REPOSITORY = echo ${{ github.repository }}
            $env.BRANCH_NAME = echo ${{env.TRIGGER_BRANCH_NAME}}
            $env.DL_PATH = ".github/CODEOWNERS"
          }
          nu pr.nu DLRemoteFileExport false
          mkdir .github
          mv CODEOWNERS .github/CODEOWNERS
          mkdir .github/workflows/scripts
          mv pr.nu .github/workflows/scripts/pr.nu

      - name: check all checks
        id: check-all-checks
        shell: nu {0}
        env:
          GH_TOKEN: ${{ secrets.GH_BOT_TOKEN }}
        run: |
          use std log
          ^pwd
          ^ls -allh

          let prNumber = echo ${{ steps.dl-pr-info.outputs.prNumber }}
          mut pullRequest = gh api --paginate -H "Accept: application/vnd.github+json" -H "X-GitHub-Api-Version: 2022-11-28"   $"/repos/${{ github.repository }}/pulls/($prNumber)" | from json


          log info $"check pr is open .........($pullRequest | get state | str upcase)"
          if ($pullRequest | get state | str upcase ) != "OPEN" {
            log error "PR is not open, please check the PR status."
            do { nu ${{env.DL_PR_PATH}} GetMsgAndNotification "in_progress" 2 $prNumber ({message: "pr is not open."} | to json -r) } | ignore
            echo  "checkPass=false" |  save --append $env.GITHUB_OUTPUT
            exit 1
          }

          log info $"check needed updates.........($pullRequest | get mergeable_state | str upcase)"
          let dnow = ((date now | into int) / 1000000000) | into int
          while true {
            let merged = $pullRequest | get merged | default false | into bool
            if $merged {
              log error "PR is already merged, no need to check."
              do { nu ${{env.DL_PR_PATH}} GetMsgAndNotification "in_progress" 2 $prNumber ({message: "pr is already merged."} | to json -r) } | ignore
              exit 1
            }
            if ($pullRequest | get state | str upcase ) != "OPEN" {
              log error "PR is not open, please check the PR status."
              do { nu ${{env.DL_PR_PATH}} GetMsgAndNotification "in_progress" 2 $prNumber ({message: "pr is not open."} | to json -r) } | ignore
              exit 1
            }
            let dnowTmp = ((date now | into int) / 1000000000) | into int
            if (($dnowTmp - $dnow) > 1200) {
              log error "check max timeout: 20min."
              let body = "❌ pr status not changed, max timeout: 20min."
              gh api --method POST -H "Accept: application/vnd.github+json" -H "X-GitHub-Api-Version: 2022-11-28" $"/repos/${{ github.repository }}/issues/($prNumber)/comments" -f $"body=($body)"
              do { nu ${{env.DL_PR_PATH}} GetMsgAndNotification "in_progress" 2 $prNumber ({message: "pr status not changed, max timeout: 20min."} | to json -r) } | ignore
              echo  "checkPass=false" |  save --append $env.GITHUB_OUTPUT
              exit 1
            }
            if ($pullRequest | get mergeable_state | str upcase) in ["UNKNOWN"] {
              log info "PR status is `UNKNOWN`, waiting for it to be updated."
              sleep 5sec
              
              $pullRequest = (gh api --paginate -H "Accept: application/vnd.github+json" -H "X-GitHub-Api-Version: 2022-11-28"   $"/repos/${{ github.repository }}/pulls/($prNumber)" | from json)
              
              continue
            }
            break
          }

          mut isUpdate = false
          if ($pullRequest | get mergeable_state | str upcase) == "BEHIND" {
            log info "PR is behind the base branch, trying to update it."

            let result = gh api --method PUT -H "Accept: application/vnd.github+json" -H "X-GitHub-Api-Version: 2022-11-28"  $"/repos/${{ github.repository }}/pulls/($prNumber)/update-branch"
            log info "update branch result:"
            log info ($result | to json -r)
            $isUpdate = true
            sleep 20sec
          }


          log info $"check has conflict.........($pullRequest | get mergeable_state | str upcase)"
          if ($pullRequest | get mergeable_state | str upcase) == "DIRTY" {
            log error "PR has conflicts, please resolve the conflicts before merging."
            let body = "PR has conflicts, please resolve the conflicts before merging."
            gh api --method POST -H "Accept: application/vnd.github+json" -H "X-GitHub-Api-Version: 2022-11-28" $"/repos/${{ github.repository }}/issues/($prNumber)/comments" -f $"body=($body)"
            do { nu ${{env.DL_PR_PATH}} GetMsgAndNotification "in_progress" 2 $prNumber ({message: "PR has conflicts, please resolve the conflicts before merging."} | to json -r) } | ignore
            echo  "checkPass=false" |  save --append $env.GITHUB_OUTPUT
            exit 1
          }

          if ($isUpdate == false) {
            let pullRequest = gh api --paginate  -H "Accept: application/vnd.github+json" -H "X-GitHub-Api-Version: 2022-11-28"   $"/repos/${{ github.repository }}/pulls/($prNumber)" | from json
            let sha = $pullRequest   | get -i head | get -i sha
            log info ($sha | into string)

            mut checks = (gh api --paginate -H "Accept: application/vnd.github+json" -H "X-GitHub-Api-Version: 2022-11-28"   $"/repos/${{ github.repository }}/commits/($sha)/check-runs?check_name=merge-gatekeeper" | from json)
            mut flagCount = 0
            loop {
              $flagCount = $flagCount + 1
              if $flagCount > 20 {
                let body = $"❌ `merge-gatekeeper` is not create after 20 times check."
                gh api --method POST -H "Accept: application/vnd.github+json" -H "X-GitHub-Api-Version: 2022-11-28" $"/repos/${{ github.repository }}/issues/($prNumber)/comments" -f $"body=($body)"
                do { nu ${{env.DL_PR_PATH}} GetMsgAndNotification "in_progress" 2 $prNumber ({message: "`merge-gatekeeper` is not create after 20 times check."} | to json -r) } | ignore
                exit 1
              }
              if ($checks | get check_runs | length) == 0 {
                log warning "No `merge-gatekeeper` check found, waiting for it to be created."
                sleep 5sec
                $checks = (gh api --paginate -H "Accept: application/vnd.github+json" -H "X-GitHub-Api-Version: 2022-11-28"   $"/repos/${{ github.repository }}/commits/($sha)/check-runs?check_name=merge-gatekeeper" | from json)
                continue
              }
              break
            }

            log info ($checks | to json -r)

            let conclusion = ($checks | get check_runs | get 0 | get conclusion)
            let checkStatus = ($checks | get check_runs | get 0 | get status)
            log info $"check conclusion: ($conclusion)"
            log info $"check status: ($checks | get check_runs | get 0 | get status)"
            if ($checkStatus == "completed") and ($conclusion == "success") {
              echo  "checkPass=true" |  save --append $env.GITHUB_OUTPUT
              exit 0
            }

            log error $"❌ `merge-gatekeeper`: ($checkStatus), Please make sure that `merge-gatekeeper` is complete and passed."
            let body = $"❌ `merge-gatekeeper`: ($checkStatus), Please make sure that `merge-gatekeeper` is complete and passed."
            gh api --method POST -H "Accept: application/vnd.github+json" -H "X-GitHub-Api-Version: 2022-11-28" $"/repos/${{ github.repository }}/issues/($prNumber)/comments" -f $"body=($body)"
            do { nu ${{env.DL_PR_PATH}} GetMsgAndNotification "in_progress" 2 $prNumber ({message: $"`merge-gatekeeper`: ($checkStatus), Please make sure that `merge-gatekeeper` is complete and passed"} | to json -r) } | ignore
            echo  "checkPass=false" |  save --append $env.GITHUB_OUTPUT
            exit 1
          }


          log info "check all checks passed........."
          let dnow = ((date now | into int) / 1000000000) | into int
          while 1 == 1 {
            $env.REPOSITORY = echo ${{ github.repository }}
            let pullRequest = gh api --paginate  -H "Accept: application/vnd.github+json" -H "X-GitHub-Api-Version: 2022-11-28"   $"/repos/${{ github.repository }}/pulls/($prNumber)" | from json
            let sha = $pullRequest   | get -i head | get -i sha
            log info ($sha | into string)

            mut checks = (gh api --paginate -H "Accept: application/vnd.github+json" -H "X-GitHub-Api-Version: 2022-11-28"   $"/repos/${{ github.repository }}/commits/($sha)/check-runs?check_name=merge-gatekeeper" | from json)
            mut flagCount = 0
            loop {
              $flagCount = $flagCount + 1
              if $flagCount > 20 {
                let body = $"❌ `merge-gatekeeper` is not create after 20 times check."
                gh api --method POST -H "Accept: application/vnd.github+json" -H "X-GitHub-Api-Version: 2022-11-28" $"/repos/${{ github.repository }}/issues/($prNumber)/comments" -f $"body=($body)"
                do { nu ${{env.DL_PR_PATH}} GetMsgAndNotification "in_progress" 2 $prNumber ({message: "`merge-gatekeeper` is not create after 20 times check."} | to json -r) } | ignore
                exit 1
              }
              if ($checks | get check_runs | length) == 0 {
                log warning "No `merge-gatekeeper` check found, waiting for it to be created."
                sleep 5sec
                $checks = (gh api --paginate -H "Accept: application/vnd.github+json" -H "X-GitHub-Api-Version: 2022-11-28"   $"/repos/${{ github.repository }}/commits/($sha)/check-runs?check_name=merge-gatekeeper" | from json)
                continue
              }
              break
            }

            log info ($checks | to json -r)
            let conclusion = ($checks | get check_runs | get 0 | get conclusion)
            let checkStatus = ($checks | get check_runs | get 0 | get status)
            let notExpectConclusion = ["CANCELLED", "TIMED_OUT", "SKIPPED", "STARTUP_FAILURE", "FAILURE"]
            if  ($conclusion | is-not-empty) and (($conclusion | str upcase) in $notExpectConclusion) {
              let body = $"❌ `merge-gatekeeper` is `($conclusion)`."
              gh api --method POST -H "Accept: application/vnd.github+json" -H "X-GitHub-Api-Version: 2022-11-28" $"/repos/${{ github.repository }}/issues/($prNumber)/comments" -f $"body=($body)"
              do { nu ${{env.DL_PR_PATH}} GetMsgAndNotification "in_progress" 2 $prNumber ({message: $"`merge-gatekeeper` is `($conclusion)`."} | to json -r) } | ignore
              echo  "checkPass=false" |  save --append $env.GITHUB_OUTPUT
              exit 1
            }

            log info $"check conclusion: ($conclusion)"
            log info $"check status: ($checks | get check_runs | get 0 | get status)"
            if ($checkStatus == "completed") and ($conclusion == "success")  {
              break
            }

            let dnowTmp = ((date now | into int) / 1000000000) | into int
            if (($dnowTmp - $dnow) > 600 and ($checkStatus | str upcase) == "QUEUED") {
              log error "check max timeout: 10min."
              let body = "❌ `merge-gatekeeper` check max timeout: 10min. Status is still `QUEUED`."
              gh api --method POST -H "Accept: application/vnd.github+json" -H "X-GitHub-Api-Version: 2022-11-28" $"/repos/${{ github.repository }}/issues/($prNumber)/comments" -f $"body=($body)"
              do { nu ${{env.DL_PR_PATH}} GetMsgAndNotification "in_progress" 2 $prNumber ({message: "`merge-gatekeeper` check max timeout: 10min. Status is still `QUEUED`."} | to json -r) } | ignore
              echo  "checkPass=false" |  save --append $env.GITHUB_OUTPUT
              exit 1
            }

            if (($dnowTmp - $dnow) > 1200) {
              log error "check max timeout: 20min."
              let body = "❌ `merge-gatekeeper` check max timeout: 20min."
              gh api --method POST -H "Accept: application/vnd.github+json" -H "X-GitHub-Api-Version: 2022-11-28" $"/repos/${{ github.repository }}/issues/($prNumber)/comments" -f $"body=($body)"
              do { nu ${{env.DL_PR_PATH}} GetMsgAndNotification "in_progress" 2 $prNumber ({message: "`merge-gatekeeper` check max timeout: 20min."} | to json -r) } | ignore
              echo  "checkPass=false" |  save --append $env.GITHUB_OUTPUT
              exit 1
            }
            if ($checkStatus == "completed") and ($conclusion == "success")  {
              echo  "checkPass=true" |  save --append $env.GITHUB_OUTPUT
              exit 0
            }
            sleep 5sec
          }



          echo  "checkPass=true" |  save --append $env.GITHUB_OUTPUT

      - name: check approval
        if: steps.check-all-checks.outputs.checkPass == 'true'
        shell: nu {0}
        id: check-approvals
        env:
          GH_TOKEN: ${{ secrets.GH_BOT_TOKEN }}
        run: |
        
          use std log
          log info "check approval........."
          $env.REPOSITORY = ^echo ${{ github.repository }}
          nu ${{env.DL_PR_PATH}} collectPR ${{ steps.dl-pr-info.outputs.prNumber }}
          let prNumber = ^echo ${{ steps.dl-pr-info.outputs.prNumber }}
          let result = open result.json
          log info ($result | to json -r)
          if (($result | get -i needApproval | default []) | length ) > 0  {
            log info "This PR needs approval from code owners."

            let codeOwners = $result | get -i needApproval | each {|x| $x | str replace -a "@" ""} | each {|x| ["`" $x "`"] | str join ''} | str join " and/or "
            let body = $"This PR needs approval from code owners. Waiting on code owner review from ($codeOwners)."

            gh api --method POST -H "Accept: application/vnd.github+json" -H "X-GitHub-Api-Version: 2022-11-28" /repos/${{ github.repository }}/issues/${{ steps.dl-pr-info.outputs.prNumber }}/comments -f $"body=($body)"
            do { nu ${{env.DL_PR_PATH}} GetMsgAndNotification "in_progress" 2 $prNumber ({message: $"This PR needs approval from code owners. Waiting on code owner review from ($codeOwners)."} | to json -r) } | ignore
            echo  "approved=false" |  save --append $env.GITHUB_OUTPUT
            exit 0
          }
          echo  "approved=true" |  save --append $env.GITHUB_OUTPUT
      - name: Prompt user to comment /queue
        if: steps.check-approvals.outputs.approved == 'true'
        uses: peter-evans/create-or-update-comment@v4
        with:
          issue-number: ${{ steps.dl-pr-info.outputs.prNumber }}
          body: |
            ✅ This PR has been approved.
            ✅ This PR is synced with the base branch.
            ✅ This PR no conflicts with the base branch.
            ✅ This PR all checks passed.
            ✅ Congratulations! PR is try to be merge.
      - name: Merge PR
        if: steps.check-approvals.outputs.approved == 'true'
        shell: nu {0}
        env:
          GH_TOKEN: ${{ secrets.GH_BOT_TOKEN }}
        run: |
          use std log
          let prNumber = echo ${{ steps.dl-pr-info.outputs.prNumber }}
          let pullRequest = gh api --paginate  -H "Accept: application/vnd.github+json" -H "X-GitHub-Api-Version: 2022-11-28"   $"/repos/${{ github.repository }}/pulls/($prNumber)" | from json

          log info "check have force commit........."
          $env.REPOSITORY = ^echo ${{ github.repository }}
          let msgsPath = nu ${{env.DL_PR_PATH}} concatForceCommitMsg $prNumber (['[CI]','[bot]','Autoupdate tags'] | to json -r)
          if (open $msgsPath | from json | is-not-empty ) {
            log error "PR has force commit"
            let allForceCommits = (open $msgsPath | from json)
            mut body = []
            if (($allForceCommits | length) > 0) {
              $body = $body | append "**Force merged commits:**" | append "\n"
              for $commit in $allForceCommits {
                $body = $body | append $"- [`($commit.sha)`]\(($commit.html_url)\) by **($commit.author)**: ($commit.commitShort)\n"
              }
            }
            $body = $body | append "\n"
            $body = $body | append $"**This PR has been removed from the merge queue to prevent conflicts.**\n"
            $body = $body | append "If you still want to merge this PR, please:\n"
            $body = $body | append "1. Resolve any potential conflicts\n"
            $body = $body | append $"2. Re-add to queue by commenting: `/queue` or `/q`\n"
            let notificationBody = ($body | str join '')

            let body = $notificationBody
            gh api --method POST -H "Accept: application/vnd.github+json" -H "X-GitHub-Api-Version: 2022-11-28" /repos/${{ github.repository }}/issues/${{ steps.dl-pr-info.outputs.prNumber }}/comments -f $"body=($body)"
            log error "PR has force commit, please check the PR and try to merge again."
            do { nu ${{env.DL_PR_PATH}} GetMsgAndNotification "in_progress" 2 $prNumber ({message: $notificationBody} | to json -r) } | ignore
            exit 1
          }


          log info $"Merging PR #($prNumber)"
          try {
            let pullRequest = gh api --paginate  -H "Accept: application/vnd.github+json" -H "X-GitHub-Api-Version: 2022-11-28"   $"/repos/${{ github.repository }}/pulls/($prNumber)" | from json
            log info "check has conflict........."
            if ($pullRequest | get mergeable_state | str upcase) == "DIRTY" {
              log error "PR has conflicts, please resolve the conflicts before merging."
              let body = "PR has conflicts, please resolve the conflicts before merging."
              gh api --method POST -H "Accept: application/vnd.github+json" -H "X-GitHub-Api-Version: 2022-11-28" $"/repos/${{ github.repository }}/issues/($prNumber)/comments" -f $"body=($body)"
              do { nu ${{env.DL_PR_PATH}} GetMsgAndNotification "in_progress" 2 $prNumber ({message: "PR has conflicts, please resolve the conflicts before merging."} | to json -r) } | ignore
              exit 1
            }

            let mergeResult = do { gh api --method PUT -H "Accept: application/vnd.github+json" -H "X-GitHub-Api-Version: 2022-11-28" $"/repos/${{ github.repository }}/pulls/($prNumber)/merge" -f "merge_method=squash" } | complete
            log info ($mergeResult | to json -r)
          } catch { |e|
            let stdErr = ($e | get -i stderr | default "")
            log error $"Failed to merge PR #($prNumber): ($stdErr)"
            do { nu ${{env.DL_PR_PATH}} GetMsgAndNotification "in_progress" 2 $prNumber ({message: $"Failed to merge PR #($prNumber): ($stdErr)"} | to json -r) } | ignore
            exit 1
          }

          log info $"PR #($prNumber) merged successfully"
          let pullRequest = gh api --paginate  -H "Accept: application/vnd.github+json" -H "X-GitHub-Api-Version: 2022-11-28"   $"/repos/${{ github.repository }}/pulls/($prNumber)" | from json
          let sha =  $pullRequest | get head.sha

          do { nu ${{env.DL_PR_PATH}} GetMsgAndNotification "in_progress" 1 $prNumber } | ignore

          gh api --method POST -H "Accept: application/vnd.github+json" -H "X-GitHub-Api-Version: 2022-11-28" $"/repos/${{ github.repository }}/statuses/($sha)" -f "state=success" -f "context=Merge Queue" -f "description=PR has been merged successfully."

          let body = $"PR #($prNumber) has been merged successfully. Thank you for your contribution!"

          gh api --method POST -H "Accept: application/vnd.github+json" -H "X-GitHub-Api-Version: 2022-11-28" /repos/${{ github.repository }}/issues/${{ steps.dl-pr-info.outputs.prNumber }}/comments -f $"body=($body)"

      - name: DL `pr/pr.yaml`
        shell: nu {0}
        if: always()
        id: re-dl-pr-info
        env:
          GH_TOKEN: ${{ secrets.GH_BOT_TOKEN }}
        run: |
          use std log
          def DLRemoteFile [filePath,branchName="master",needTmp=false] {
            log debug $"get content from remote ...........($filePath | path basename)"
            let resp = (gh api -H 'Pragma: no-cache' -H "Accept: application/vnd.github+json" -H "X-GitHub-Api-Version: 2022-11-28" $"/repos/($env.REPOSITORY)/contents/($filePath)?ref=($branchName)")
            mut fileNameTmp = $filePath | path basename
            if $needTmp {
              $fileNameTmp = echo "/tmp" | path join (random uuid)
            }

            (echo $resp | from json | get content | base64 -d | save -f $fileNameTmp)
            return {
              tmpPath: $fileNameTmp,
              sha: ($resp | from json | get sha | default ""),
            }
          }

          export def DLRemoteFileExport [needTmp=false] {
            let fileNameTmp = echo "/tmp" | path join (random uuid)
            let dlInfo = DLRemoteFile $env.DL_PATH ($env.BRANCH_NAME | default ${{env.TRIGGER_BRANCH_NAME}}) $needTmp
            $dlInfo | to json | save -f $fileNameTmp
            return $fileNameTmp
          }
          export-env {
            $env.REPOSITORY = echo ${{ github.repository }}
            $env.BRANCH_NAME = echo ${{env.TRIGGER_BRANCH_NAME}}
            $env.DL_PATH = echo ${{env.DL_PR_PATH}}
          }
          DLRemoteFileExport false

          $env.REPOSITORY = ^echo ${{ github.repository }}
          export-env {
            $env.BRANCH_NAME = "gh-pr"
            $env.DL_PATH = "pr/pr.yaml"
          }
          let prResultPath = nu pr.nu DLRemoteFileExport true
          let prPath = open $prResultPath | from json  | get -i tmpPath
          let prInfo = open $prPath | from yaml | default []
          if (($prInfo | length) == 0) {
            log error "No PRs in queue."
            echo  $"needContinuePopQueue=false" |  save --append $env.GITHUB_OUTPUT
            exit 0
          }
          echo  $"needContinuePopQueue=true" |  save --append $env.GITHUB_OUTPUT

      - name: need trigger pop queue?
        shell: nu {0}
        if: always()
        env:
          GH_TOKEN: ${{ secrets.GH_BOT_TOKEN }}
        run: |
          use std log
          let continuePopQueue = echo ${{ steps.re-dl-pr-info.outputs.needContinuePopQueue }}
          if (($continuePopQueue | is-not-empty)  and ($continuePopQueue | into bool) == false) {
            log warning "No need to trigger pop queue, continuePopQueue is empty"
            return
          }

          let haveRunsInProcess = gh api -H "Accept: application/vnd.github+json" -H "X-GitHub-Api-Version: 2022-11-28"   /repos/${{ github.repository }}/actions/workflows/172946395/runs?per_page=100 | from json | get -i workflow_runs | default [] | where {|x| $x.status == 'waiting' or $x.status == 'queued' or $x.status == 'in_progress' or $x.status == 'pending'}
          if (($haveRunsInProcess | length) > 1) {
            log warning "There are still runs in process, not trigger pop queue"
            return
          }
          # pop queue
          log info $"Continue ........Triggering pop queue workflow with ref: `${{env.TRIGGER_BRANCH_NAME}}`"
          gh api --method POST -H "Accept: application/vnd.github+json" -H "X-GitHub-Api-Version: 2022-11-28" /repos/${{ github.repository }}/actions/workflows/172946395/dispatches -f "ref=${{env.TRIGGER_BRANCH_NAME}}"
