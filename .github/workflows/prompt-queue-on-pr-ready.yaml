
name: Prompt Queue on PR Ready

run-name: "On PR Ready, PR number: ${{ github.event.pull_request.number }}"

on:
  pull_request_review:
    types: [submitted]
env:
  GH_TOKEN: ${{ secrets.GH_BOT_TOKEN }}
  TRIGGER_BRANCH_NAME: master
  PR_NU_PATH: /tmp/tools/scripts/merge-queue/pr.nu
  GH_USER: crab21
  SLACK_MERGE_QUEUE_CHANNEL: "C09AGCDGMBP"
  MergeQueueFileName: "merge-queue.yaml"
  GH_USER_TOKEN: ${{ secrets.GH_USER_TOKEN }}
jobs:
  prompt-queue:
    if: github.event_name == 'pull_request_review' && github.event.review.state == 'approved'
    runs-on: ubuntu-latest
    steps:
      - uses: hustcer/setup-nu@main
        with:
          version: "0.105.1"
      - name: checkout tools
        shell: nu {0}
        run: |
          use std log
          use std
          # git clone --progress -v --depth 1 --filter=blob:none --no-checkout $'https://($env.GH_USER):($env.GH_TOKEN)@github.com/lotusflare/rhino.git' /tmp/tools o+e>| save -f /tmp/tools.log
          git clone --progress -v --depth 1 --filter=blob:none --no-checkout $'https://peiyuanwang0:($env.GH_USER_TOKEN)@github.com/lotusflare/rhino.git' /tmp/tools o+e>| save -f /tmp/tools.log
          let currPwd = pwd
          cd /tmp/tools
          git sparse-checkout init --cone o+e> (std null-device)
          git sparse-checkout set scripts/merge-queue o+e> (std null-device)
          git checkout main o+e>| save -f /tmp/tools.log
          ^ls -allh scripts/merge-queue
          cd $currPwd

      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ref: ${{ github.head_ref}}
      - name: dl `codeowners`
        shell: nu {0}

        run: |
          use std log
          export-env {
            $env.BRANCH_NAME = echo ${{ github.event.pull_request.base.ref }}
          }
          print ${{ github.event.pull_request.base.ref }}
          print ${{ github.event.pull_request.head.ref }}
          nu $env.PR_NU_PATH cloneFile


      - name: check open and approval
        shell: nu {0}
        id: check-approvals

        run: |
          use std log
          log info "pr approval"
          let prNumber = echo ${{ github.event.pull_request.number }}

              
          let autoMergeLabel = do { nu $env.PR_NU_PATH checkAllChecks $prNumber ({
                containStepNames: ["checkPROpen", "checkHasNotMergeLabel",  "checkNeedUpdate",  "checkConflict", "checkMergeGatekeeper", "checkApproval","checkHasAutoMergeLabel"]
              } | to json ) } | complete
          print $autoMergeLabel
          if ($autoMergeLabel | get exit_code) == 255 {
            exit 1
          }
          if ($autoMergeLabel | get exit_code) != 1 {
            echo  "approved=true" |  save --append $env.GITHUB_OUTPUT
            exit 0
          }

          #  add to queue
          log info $"PR #($prNumber) has auto merge label, skipping."
          nu $env.PR_NU_PATH addQueueToGitFile $prNumber ({resource: "auto-merge-label"} | to json -r)
          log info $"Added PR #($prNumber) to the queue."

          let haveRunsInProcess = gh api -H "Accept: application/vnd.github+json" -H "X-GitHub-Api-Version: 2022-11-28"   $"/repos/${{ github.repository }}/actions/workflows/($env.MergeQueueFileName)/runs?per_page=100" | from json | get -i workflow_runs | default [] | where {|x| $x.status == 'waiting' or $x.status == 'queued' or $x.status == 'in_progress' or $x.status == 'pending'}

          if (($haveRunsInProcess | length) > 1) {
            log warning "There are still runs in process, not trigger pop queue"
            return
          }
          # pop queue
          log info $"Continue ........Triggering pop queue workflow with ref: `${{env.TRIGGER_BRANCH_NAME}}`"
          gh api --method POST -H "Accept: application/vnd.github+json" -H "X-GitHub-Api-Version: 2022-11-28" $"/repos/${{ github.repository }}/actions/workflows/($env.MergeQueueFileName)/dispatches" -f "ref=${{env.TRIGGER_BRANCH_NAME}}"

          echo  "approved=true" |  save --append $env.GITHUB_OUTPUT

      - name: Prompt user to comment /queue
        shell: nu {0}

        run: |
          use std log
          let prNumber = echo ${{ github.event.pull_request.number }}
          let body = '
            âœ… PR has been approved.
            Please make sure `merge-gatekeeper` action check have passed.
            Then you can comment: `/queue` or `/q` to add this PR to the merge queue.'
          gh api --method POST -H "Accept: application/vnd.github+json" -H "X-GitHub-Api-Version: 2022-11-28" $"/repos/($env.GITHUB_REPOSITORY)/issues/($prNumber)/comments" -f $"body=($body)"
