
name: Prompt Queue on PR Ready

run-name: "On PR Ready, PR number: ${{ github.event.pull_request.number }}"

on:
  pull_request_review:
    types: [submitted]
env:
  GH_TOKEN: ${{ secrets.GH_BOT_TOKEN }}
  TRIGGER_BRANCH_NAME: master
  DL_PR_PATH: .github/workflows/scripts/pr.nu
jobs:
  prompt-queue:
    if: github.event_name == 'pull_request_review' && github.event.review.state == 'approved'
    runs-on: general-nano-x86-v2
    steps:
      - uses: hustcer/setup-nu@main
        with:
          version: "0.105.1"

      - name: DL `pr/pr.yaml`
        shell: nu {0}
        id: dl-pr-info
        env:
          GH_TOKEN: ${{ secrets.GH_BOT_TOKEN }}
        run: |
          use std log
          let prNumber = echo ${{ github.event.pull_request.number }}
          ^pwd
          echo $"prNumber=($prNumber)" |  save --append $env.GITHUB_OUTPUT
      - name: get head ref
        if: steps.dl-pr-info.outputs.prNumber != ''
        shell: nu {0}
        id: get-head-ref
        env:
          GH_TOKEN: ${{ secrets.GH_BOT_TOKEN }}
        run: |
          use std log
          ^pwd
          ^ls -allh

          let prNumber = echo ${{ steps.dl-pr-info.outputs.prNumber }}
          let pullRequest = gh api --paginate -H "Accept: application/vnd.github+json" -H "X-GitHub-Api-Version: 2022-11-28"   $"/repos/${{ github.repository }}/pulls/($prNumber)" | from json

          let currentRef = $pullRequest | get -i head | get -i ref | default "" | into string
          log info $"currentRef: ($currentRef)"
          if ($currentRef | is-empty) {
            log error "No head ref found for PR #($prNumber)."
            exit 1
          }
          echo $"currentRef=($currentRef)" |  save --append $env.GITHUB_OUTPUT

      - name: check pr ${{ steps.dl-pr-info.outputs.prNumber }} is `open`
        if: steps.dl-pr-info.outputs.prNumber != ''
        id: check-pr-open
        shell: nu {0}
        env:
          GH_TOKEN: ${{ secrets.GH_BOT_TOKEN }}
        run: |
          use std log
          ^pwd
          ^ls -allh

          let prNumber = echo ${{ steps.dl-pr-info.outputs.prNumber }}
          let pullRequest = gh api --paginate -H "Accept: application/vnd.github+json" -H "X-GitHub-Api-Version: 2022-11-28"   $"/repos/${{ github.repository }}/pulls/($prNumber)" | from json


          log info "check pr is open ........."
          if ($pullRequest | get state | str upcase ) != "OPEN" {
            log error "PR is not open, please check the PR status."
            echo  "checkPass=false" |  save --append $env.GITHUB_OUTPUT
            exit 1
          }
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ref: ${{ steps.get-head-ref.outputs.currentRef}}

      - name: dl codeowners
        if: steps.dl-pr-info.outputs.prNumber != ''
        shell: nu {0}
        env:
          GH_TOKEN: ${{ secrets.GH_BOT_TOKEN }}
        run: |
          use std log
          ^pwd
          ^ls -allh
          rm -rf .github/CODEOWNERS
          rm -rf ${{env.DL_PR_PATH}}
          use std log
          def DLRemoteFile [filePath,branchName="master",needTmp=false] {
            log debug $"get content from remote ...........($filePath | path basename)"
            let resp = (gh api --paginate -H 'Pragma: no-cache' -H "Accept: application/vnd.github+json" -H "X-GitHub-Api-Version: 2022-11-28" $"/repos/($env.REPOSITORY)/contents/($filePath)?ref=($branchName)")
            mut fileNameTmp = $filePath | path basename
            if $needTmp {
              $fileNameTmp = echo "/tmp" | path join (random uuid)
            }

            (echo $resp | from json | get content | base64 -d | save -f $fileNameTmp)
            return {
              tmpPath: $fileNameTmp,
              sha: ($resp | from json | get sha | default ""),
            }
          }

          export def DLRemoteFileExport [needTmp=false] {
            let fileNameTmp = echo "/tmp" | path join (random uuid)
            let dlInfo = DLRemoteFile $env.DL_PATH ($env.BRANCH_NAME | default ${{env.TRIGGER_BRANCH_NAME}}) $needTmp
            $dlInfo | to json | save -f $fileNameTmp
            return $fileNameTmp
          }

          export-env {
            $env.REPOSITORY = echo ${{ github.repository }}
            $env.BRANCH_NAME = echo ${{env.TRIGGER_BRANCH_NAME}}
            $env.DL_PATH = echo ${{env.DL_PR_PATH}}
          }
          DLRemoteFileExport false
          ^ls -allh
          export-env {
            $env.REPOSITORY = echo ${{ github.repository }}
            $env.BRANCH_NAME = echo ${{env.TRIGGER_BRANCH_NAME}}
            $env.DL_PATH = ".github/CODEOWNERS"
          }
          nu pr.nu DLRemoteFileExport false
          mkdir .github
          mv CODEOWNERS .github/CODEOWNERS
          mkdir .github/workflows/scripts
          mv pr.nu .github/workflows/scripts/pr.nu

      - name: check approval
        shell: nu {0}
        id: check-approvals
        env:
          GH_TOKEN: ${{ secrets.GH_BOT_TOKEN }}
        run: |
          use std log
          log info "pr approval"
          $env.REPOSITORY = ^echo ${{ github.repository }}
          nu ${{env.DL_PR_PATH}} collectPR ${{ github.event.pull_request.number }}
          let result = open result.json
          log info ($result | to json -r)
          if (($result | get -i needApproval | default []) | length ) > 0  {
            log info "This PR needs approval from code owners."

            let codeOwners = $result | get -i needApproval | each {|x| $x | str replace -a "@" ""} | each {|x| ["`" $x "`"] | str join ''} | str join " and/or "
            let body = $"This PR needs approval from code owners. Waiting on code owner review from ($codeOwners)."
            gh api --method POST -H "Accept: application/vnd.github+json" -H "X-GitHub-Api-Version: 2022-11-28" /repos/${{ github.repository }}/issues/${{ github.event.pull_request.number }}/comments -f $"body=($body)"

            echo  "approved=false" |  save --append $env.GITHUB_OUTPUT
            exit 0
          }
          echo  "approved=true" |  save --append $env.GITHUB_OUTPUT

      - name: Prompt user to comment /queue
        if: steps.check-approvals.outputs.approved == 'true'
        uses: peter-evans/create-or-update-comment@v4
        with:
          issue-number: ${{ github.event.pull_request.number }}
          body: |
            âœ… PR has been approved.
            Please make sure `merge-gatekeeper` action check have passed.
            Then you can comment: `/queue` or `/q` to add this PR to the merge queue.