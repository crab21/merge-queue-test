name: Trigger Merge Queue on Comment
run-name: "On PR Ready, PR number: ${{ github.event.issue.number }}, commenter: ${{ github.actor }}"
on:
  issue_comment:
    types: [created]

env:
  TRIGGER_BRANCH_NAME: main
  PR_NU_PATH: /tmp/tools/scripts/merge-queue/pr.nu
  GH_USER: crab21
  SLACK_TOKEN: ${{ secrets.SLACK_API_TOKEN_IT_INTEGRATION_PARALLEL }}
  GH_TOKEN: ${{ secrets.GH_BOT_TOKEN }}
  SLACK_MERGE_QUEUE_CHANNEL: "C09AGCDGMBP"
  MergeQueueFileName: "merge-queue.yaml"
  GH_USER_TOKEN: ${{ secrets.GH_USER_TOKEN }}

jobs:
  trigger-queue:
    runs-on: ubuntu-latest
    if: github.event.issue.pull_request && (startsWith(github.event.comment.body, '/queue') || startsWith(github.event.comment.body, '/q'))
    steps:
      - uses: hustcer/setup-nu@main
        with:
          version: "0.105.1"
      - name: checkout tools
        shell: nu {0}
        run: |
          use std log
          use std
          # git clone --progress -v --depth 1 --filter=blob:none --no-checkout $'https://($env.GH_USER):($env.GH_TOKEN)@github.com/lotusflare/rhino.git' /tmp/tools o+e>| save -f /tmp/tools.log
          git clone --progress -v --depth 1 --filter=blob:none --no-checkout $'https://peiyuanwang0:($env.GH_USER_TOKEN)@github.com/lotusflare/rhino.git' /tmp/tools o+e>| save -f /tmp/tools.log
          let currPwd = pwd
          cd /tmp/tools
          git sparse-checkout init --cone o+e> (std null-device)
          git sparse-checkout set scripts/merge-queue o+e> (std null-device)
          git checkout main o+e>| save -f /tmp/tools.log
          ^ls -allh scripts/merge-queue
          cd $currPwd
      - name: Log event info
        run: |
          echo "Triggered by comment: ${{ github.event.comment.body }}"
          echo "PR number: ${{ github.event.issue.number }}"
          echo "Repository: ${{ github.repository }}"

      - name: get head ref
        shell: nu {0}
        id: get-head-ref

        run: |
          use std log
          ^pwd
          ^ls -allh

          let prNumber = echo ${{ github.event.issue.number }}
          let pullRequest = gh api --paginate -H "Accept: application/vnd.github+json" -H "X-GitHub-Api-Version: 2022-11-28"   $"/repos/${{ github.repository }}/pulls/($prNumber)" | from json

          let currentRef = $pullRequest | get -i head | get -i ref | default "" | into string
          let baseRef = $pullRequest | get -i base | get -i ref | default "" | into string
          if ($currentRef | is-empty) {
            log error "No head ref found for PR #($prNumber)."
            exit 1
          }
          echo $"currentRef=($currentRef)\n" |  save --append $env.GITHUB_OUTPUT
          echo $"baseRef=($baseRef)\n" |  save --append $env.GITHUB_OUTPUT

      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ref: ${{ steps.get-head-ref.outputs.currentRef}}

      - name: dl `codeowners`
        shell: nu {0}

        run: |
          use std log
          export-env {
            $env.BRANCH_NAME = echo ${{ steps.get-head-ref.outputs.baseRef}}
          }
          print ${{ steps.get-head-ref.outputs.baseRef}}
          print ${{ steps.get-head-ref.outputs.currentRef}}
          nu $env.PR_NU_PATH cloneFile
          cat .github/CODEOWNERS
      - name: check open and approval
        shell: nu {0}
        id: check-all

        run: |
          use std log
          log info "pr approval"
          # {name: $checkPROpenKey, cfunc: $checkPROpen},
          # {name: $checkHasNotMergeLabelKey, cfunc: $checkHasNotMergeLabel},
          # {name: $checkNeedUpdateKey, cfunc: $checkUpdate},
          # {name: $checkConflictKey, cfunc: $checkHaveConflict},
          # {name: $checkMergeGateKeeperKey, cfunc: $checkActionRunsOfGateKeeper},
          # {name: $checkApprovalKey, cfunc: $checkApproval}

          let prNumber = echo ${{ github.event.issue.number }}
          nu $env.PR_NU_PATH checkAllChecks $prNumber ({
                containStepNames: ["checkPROpen", "checkHasNotMergeLabel", "checkConflict", "checkMergeGatekeeper", "checkApproval"]
              } | to json )
          echo  "approved=true" |  save --append $env.GITHUB_OUTPUT

      - name: add queue to `gh-pr` branch
        shell: nu {0}

        run: |
          use std log
          let prNumber = echo ${{ github.event.issue.number }}
          nu $env.PR_NU_PATH addQueueToGitFile $prNumber
          log info "Added PR #($prNumber) to the queue."

      - name: need trigger pop queue?
        shell: nu {0}

        run: |
          use std log
          let haveRunsInProcess = gh api -H "Accept: application/vnd.github+json" -H "X-GitHub-Api-Version: 2022-11-28"   $"/repos/${{ github.repository }}/actions/workflows/($env.MergeQueueFileName)/runs?per_page=100" | from json | get -i workflow_runs | default [] | where {|x| $x.status == 'waiting' or $x.status == 'queued' or $x.status == 'in_progress' or $x.status == 'pending'}

          if (($haveRunsInProcess | length) > 1) {
            log warning "There are still runs in process, not trigger pop queue"
            return
          }
          # pop queue
          log info $"Continue ........Triggering pop queue workflow with ref: `${{env.TRIGGER_BRANCH_NAME}}`"
          gh api --method POST -H "Accept: application/vnd.github+json" -H "X-GitHub-Api-Version: 2022-11-28" $"/repos/${{ github.repository }}/actions/workflows/($env.MergeQueueFileName)/dispatches" -f "ref=${{env.TRIGGER_BRANCH_NAME}}"
