name: Trigger Merge Queue on Comment
run-name: "On PR Ready, PR number: ${{ github.event.issue.number }}, commenter: ${{ github.actor }}"
on:
  issue_comment:
    types: [created]

env:
  TRIGGER_BRANCH_NAME: master
  DL_PR_PATH: .github/workflows/scripts/pr.nu
  SLACK_TOKEN: ${{ secrets.SLACK_API_TOKEN_IT_INTEGRATION_PARALLEL }}

jobs:
  trigger-queue:
    runs-on: ubuntu-latest
    if: github.event.issue.pull_request && (startsWith(github.event.comment.body, '/queue') || startsWith(github.event.comment.body, '/q'))
    steps:
      - uses: hustcer/setup-nu@main
        with:
          version: "0.105.1"
      - name: Log event info
        run: |
          echo "Triggered by comment: ${{ github.event.comment.body }}"
          echo "PR number: ${{ github.event.issue.number }}"
          echo "Repository: ${{ github.repository }}"

      - name: get head ref
        shell: nu {0}
        id: get-head-ref
        env:
          GH_TOKEN: ${{ secrets.GH_BOT_TOKEN }}
        run: |
          use std log
          ^pwd
          ^ls -allh

          let prNumber = echo ${{ github.event.issue.number }}
          let pullRequest = gh api --paginate -H "Accept: application/vnd.github+json" -H "X-GitHub-Api-Version: 2022-11-28"   $"/repos/${{ github.repository }}/pulls/($prNumber)" | from json

          let currentRef = $pullRequest | get -i head | get -i ref | default "" | into string
          if ($currentRef | is-empty) {
            log error "No head ref found for PR #($prNumber)."
            exit 1
          }
          echo $"currentRef=($currentRef)" |  save --append $env.GITHUB_OUTPUT
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ref: ${{ steps.get-head-ref.outputs.currentRef}}
      - name: dl `codeowners` and `pr.nu`
        shell: nu {0}
        env:
          GH_TOKEN: ${{ secrets.GH_BOT_TOKEN }}
        run: |
          use std log
          ^pwd
          ^ls -allh
          rm -rf .github/CODEOWNERS
          rm -rf ${{env.DL_PR_PATH}}
          use std log
          def DLRemoteFile [filePath,branchName="master",needTmp=false] {
            log debug $"get content from remote ...........($filePath | path basename)"
            let resp = (gh api --paginate -H 'Pragma: no-cache' -H "Accept: application/vnd.github+json" -H "X-GitHub-Api-Version: 2022-11-28" $"/repos/($env.REPOSITORY)/contents/($filePath)?ref=($branchName)")
            mut fileNameTmp = $filePath | path basename
            if $needTmp {
              $fileNameTmp = echo "/tmp" | path join (random uuid)
            }

            (echo $resp | from json | get content | base64 -d | save -f $fileNameTmp)
            return {
              tmpPath: $fileNameTmp,
              sha: ($resp | from json | get sha | default ""),
            }
          }

          def PutRemoteFile [remoteFilePath,remoteSha,modifyPath,branchName="master"] {
            log debug $"put content to remote ...........($remoteFilePath | path basename)"
            let resp = (do { gh api --method PUT -H "Accept: application/vnd.github+json" -H "X-GitHub-Api-Version: 2022-11-28" $"/repos/($env.REPOSITORY)/contents/($remoteFilePath)" -f "message=update file" -f $"content=(open $modifyPath -r | base64)" -f $"branch=($branchName)" -f $"sha=($remoteSha)"} |complete)
            return $resp
          }

          export def DLRemoteFileExport [needTmp=false] {
            let fileNameTmp = echo "/tmp" | path join (random uuid)
            let dlInfo = DLRemoteFile $env.DL_PATH ($env.BRANCH_NAME | default ${{env.TRIGGER_BRANCH_NAME}}) $needTmp
            $dlInfo | to json | save -f $fileNameTmp
            return $fileNameTmp
          }

          export-env {
            $env.REPOSITORY = echo ${{ github.repository }}
            $env.BRANCH_NAME = echo ${{env.TRIGGER_BRANCH_NAME}}
            $env.DL_PATH = echo ${{env.DL_PR_PATH}}
          }
          DLRemoteFileExport false
          ^ls -allh
          export-env {
            $env.REPOSITORY = echo ${{ github.repository }}
            $env.BRANCH_NAME = echo ${{env.TRIGGER_BRANCH_NAME}}
            $env.DL_PATH = ".github/CODEOWNERS"
          }
          nu pr.nu DLRemoteFileExport false
          mkdir .github
          mv CODEOWNERS .github/CODEOWNERS
          mkdir .github/workflows/scripts
          mv pr.nu .github/workflows/scripts/pr.nu

      - name: check all checks
        id: check-all-checks
        shell: nu {0}
        env:
          GH_TOKEN: ${{ secrets.GH_BOT_TOKEN }}
        run: |
          use std log
          let prNumber = echo ${{ github.event.issue.number }}
          let pullRequest = gh api --paginate -H "Accept: application/vnd.github+json" -H "X-GitHub-Api-Version: 2022-11-28"   '/repos/${{ github.repository }}/pulls/${{ github.event.issue.number }}'

          let sha = $pullRequest | from json  | get -i head | get -i sha
          log info ($sha | into string)

          mut checks = (gh api --paginate -H "Accept: application/vnd.github+json" -H "X-GitHub-Api-Version: 2022-11-28"   $"/repos/${{ github.repository }}/commits/($sha)/check-runs?check_name=merge-gatekeeper" | from json)
          mut flagCount = 0
          loop {
            $flagCount = $flagCount + 1
            if $flagCount > 20 {
              let body = $"❌ `merge-gatekeeper` is not create after 20 times check."
              gh api --method POST -H "Accept: application/vnd.github+json" -H "X-GitHub-Api-Version: 2022-11-28" $"/repos/${{ github.repository }}/issues/($prNumber)/comments" -f $"body=($body)"
              exit 1
            }
            if ($checks | get check_runs | length) == 0 {
              log warning "No `merge-gatekeeper` check found, waiting for it to be created."
              sleep 5sec
              $checks = (gh api --paginate -H "Accept: application/vnd.github+json" -H "X-GitHub-Api-Version: 2022-11-28"   $"/repos/${{ github.repository }}/commits/($sha)/check-runs?check_name=merge-gatekeeper" | from json)
              continue
            }
            break
          }

          log info ($checks | to json -r)
          let conclusion = ($checks | get check_runs | get 0 | get conclusion)
          let checkStatus = ($checks | get check_runs | get 0 | get status)
          if $checkStatus != "completed" or $conclusion != "success"  {
            let body = $"❌ `merge-gatekeeper`: ($checkStatus), check failed. Please fix the `merge-gatekeeper` check errors. then you can comment: `/q` to add this PR back to the queue."
            gh api --method POST -H "Accept: application/vnd.github+json" -H "X-GitHub-Api-Version: 2022-11-28" /repos/${{ github.repository }}/issues/${{ github.event.issue.number }}/comments -f $"body=($body)"

            echo  "checkPass=false" |  save --append $env.GITHUB_OUTPUT
            exit 0
          }
          echo  "checkPass=true" |  save --append $env.GITHUB_OUTPUT
      - name: check approval
        if: steps.check-all-checks.outputs.checkPass == 'true'
        shell: nu {0}
        id: check-approvals
        env:
          GH_TOKEN: ${{ secrets.GH_BOT_TOKEN }}
        run: |
          use std log
          log info "pr approval"
          $env.REPOSITORY = ^echo ${{ github.repository }}
          nu ${{env.DL_PR_PATH}} collectPR ${{ github.event.issue.number }}
          let result = open result.json
          log info ($result | to json -r)
          if (($result | get -i needApproval | default []) | length ) > 0  {
            log info "This PR needs approval from code owners."

            let codeOwners = $result | get -i needApproval | each {|x| $x | str replace -a "@" ""} | each {|x| ["`" $x "`"] | str join ''} | str join " and/or "
            let body = $"This PR needs approval from code owners. Waiting on code owner review from ($codeOwners)."

            gh api --method POST -H "Accept: application/vnd.github+json" -H "X-GitHub-Api-Version: 2022-11-28" /repos/${{ github.repository }}/issues/${{ github.event.issue.number }}/comments -f $"body=($body)"

            echo  "approved=false" |  save --append $env.GITHUB_OUTPUT
            exit 0
          }
          echo  "approved=true" |  save --append $env.GITHUB_OUTPUT
      - name: add queue to `gh-pr` branch
        shell: nu {0}
        if: steps.check-approvals.outputs.approved == 'true'
        env:
          GH_TOKEN: ${{ secrets.GH_BOT_TOKEN }}
        run: |
          use std log
          let prNumber = echo ${{ github.event.issue.number }}
          let ref = gh api --paginate -H "Accept: application/vnd.github+json" -H "X-GitHub-Api-Version: 2022-11-28"   '/repos/${{ github.repository }}/pulls/${{ github.event.issue.number }}' | from json | get head.ref
          let runsLink = "https://github.com/${{github.repository}}/actions/runs/${{github.run_id}}"
          let body = {"number": (echo ${{ github.event.issue.number }} | into string),"ghType":0, "ref": $ref, "runs_link": $runsLink} | to json -r
          export-env {
            $env.REPOSITORY = echo ${{ github.repository }}
            $env.BRANCH_NAME = "gh-pr"
            $env.DL_PATH = "pr/pr.yaml"
            $env.MAX_RETRY = 20
          }
          nu ${{env.DL_PR_PATH}} modifyQueue $body

          do { nu ${{env.DL_PR_PATH}} GetMsgAndNotification "in_progress" 0 ${{ github.event.issue.number }} } | ignore

          export-env {
            $env.BRANCH_NAME = "gh-pr"
            $env.DL_PATH = "pr/pr.yaml"
          }
          ^ls -allh
          let prResultPath = nu ${{env.DL_PR_PATH}}  DLRemoteFileExport true
          log info ($prResultPath | to json -r)
          ^cat $prResultPath
          let prPath = open $prResultPath | from json | get -i tmpPath
          let prInfo = open $prPath | from yaml | default []
          if (($prInfo | length) == 0) {
            log error "No PRs in queue."
            exit 0
          }
          let previewNumberAlls = $prInfo | sort-by queueTime
          mut previewNumbers = []
          for $previewNumber in $previewNumberAlls {
            log info $"PR in queue: ($previewNumber | to json -r)"
            if ($previewNumber.number | into int) == ($prNumber | into int) {
              break
            }
            $previewNumbers = ($previewNumbers | append ($previewNumber.number | into int))
          }
          log info $"Queue updated, next PR in queue is: ($previewNumbers | to json -r)"
          if ($previewNumbers | length) > 0 {
            let nYaml = $previewNumbers | each {|x| $'#($x)'} | lines | to yaml | str replace -a "'" ""
            $"before PRS: ($nYaml)\n" | save -f $env.GITHUB_STEP_SUMMARY
            let previewNumbersBody = $"before this PR, there are other PRs in queue: \n($nYaml) \n\nPlease wait for the merge queue to process them[reference only]."
            gh api --method POST -H "Accept: application/vnd.github+json" -H "X-GitHub-Api-Version: 2022-11-28" /repos/${{ github.repository }}/issues/${{ github.event.issue.number }}/comments -f $"body=($previewNumbersBody)"
          }

      - name: Prompt user to comment /queue
        if: steps.check-approvals.outputs.approved == 'true'
        uses: peter-evans/create-or-update-comment@v4
        with:
          issue-number: ${{ github.event.issue.number }}
          body: |
            ✅ This PR has been approved.
            ✅ This PR all checks passed.
            This PR has been added to the queue. Please wait for the merge queue to process it, thx!
      - name: need trigger pop queue?
        shell: nu {0}
        if: steps.check-approvals.outputs.approved == 'true'
        env:
          GH_TOKEN: ${{ secrets.GH_BOT_TOKEN }}
        run: |
          use std log
          let haveRunsInProcess = gh api -H "Accept: application/vnd.github+json" -H "X-GitHub-Api-Version: 2022-11-28"   /repos/${{ github.repository }}/actions/workflows/172946395/runs?per_page=100 | from json | get -i workflow_runs | default [] | where {|x| $x.status == 'waiting' or $x.status == 'queued' or $x.status == 'in_progress' or $x.status == 'pending'}

          if (($haveRunsInProcess | length) > 1) {
            log warning "There are still runs in process, not trigger pop queue"
            return
          }
          # pop queue
          log info $"Continue ........Triggering pop queue workflow with ref: `${{env.TRIGGER_BRANCH_NAME}}`"
          gh api --method POST -H "Accept: application/vnd.github+json" -H "X-GitHub-Api-Version: 2022-11-28" /repos/${{ github.repository }}/actions/workflows/172946395/dispatches -f "ref=${{env.TRIGGER_BRANCH_NAME}}"
